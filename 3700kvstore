#!/usr/bin/env python

import sys, socket, select, time, json, random

# states
CANDIDATE = 'candidate'
FOLLOWER = 'follower'
LEADER_STATE = 'leader'

LEADER = 'FFFF'
VALUES = {}
ELECTION_TIMEOUT = random.uniform(.15, .3)
STATE = FOLLOWER
TERM = 0
VOTES = 0
VOTED_FOR = None
BUFFER = []
LOG = [{'term': 0}]
NEW_ENTRIES = []

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# For leaders: dict<replica_id, index>
next_index = {} # Keeps track of the next log index to send to replicas
match_index = {} # Keeps track of the highest log entry known to be replicated for each replica

# All servers: volatile state. initialized to 0, increases monotonically
commit_index = 0 # highest log entry known to be committed.
last_applied = 0 # highest log entry *applied*.

# Timestamps
last = 0
leader_seen = 0

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

# Call after each election to re-initialize
def initialize_indices():
    global replica_ids, next_index, match_index
    #print('new leader elected: ' + str(my_id) + ', initializing indices')
    for id in replica_ids:
        next_index[id] = len(LOG) # initialize to leader last log index + 1
        match_index[id] = 0 # initialized to 0, increases monotonically

def send_buffer():
    global BUFFER
    while (len(BUFFER) > 0):
        msg = BUFFER.pop()
        if STATE == LEADER_STATE:
            msg_leader(msg)
        else:
            msg_follower(msg)

# Handler functions
def msg_leader(msg):
    global VALUES, leader_seen, LOG, LEADER, STATE, FOLLOWER, TERM, NEW_ENTRIES, next_index, match_index, commit_index
    res = None
    #print('leader LOG is ' + str(LOG))
    if msg['type'] == 'get':
        res = {'src': my_id, 'dst': msg['src'], 'leader': LEADER, 'type': 'ok', 'MID': msg['MID'], 'value': VALUES[msg['key']]}
    elif msg['type'] == 'put':
        #print('put for ' + msg['key'])
        LOG.append({'term': TERM, 'key': msg['key'], 'value': msg['value'], 'MID': msg['MID'], 'client': msg['src']})
        # send append_entries
        for id in replica_ids: 
            msg = {'src': my_id, 'dst': id, 'leader': LEADER, 'term': TERM, 'type': 'append_entries', 
'key': msg['key'], 'value': msg['value'], 'MID': msg['MID'], 'client': msg['src'], 'commit_index': commit_index,  'prevLogIndex': (next_index[id] - 1), 'prevLogTerm': LOG[next_index[id] - 1]['term']}
            sock.send(json.dumps(msg))
        last = time.time()

    elif msg['type'] == 'append_entries':
        #print(str(my_id) + ' leader receiving heartbeat')
        if (TERM < msg['term']):
            LEADER = msg['src']
            TERM = msg['term']
            leader_seen = time.time()
            STATE = FOLLOWER # they threw a coup :(
            # TODO implement commit stage here if msg['key']
    elif msg['type'] == 'request_vote':
        if (TERM < msg['term']):
            TERM = msg['term'] # they are democratically throwing a coup :(
            res = {'src': my_id, 'dst': msg['src'], 'leader': 'FFFF', 'type': 'vote', 'term': TERM}
            STATE = FOLLOWER # and we're going along with it :(
           # print('sending ' + msg['type'])
    elif msg['type'] == 'ACK':
        # update next_index and match_index
        #print('leader ' + str(my_id) + ' received ACK: ' + str(msg))
        if (msg['success']):
            next_index[msg['src']] = msg['received_index'] + 1 
            match_index[msg['src']] = msg['received_index']
        else:
            #print('DECREMENTING INDEX')
            next_index[msg['src']] = next_index[msg['src']] - 1
        #print('state of match_index: ' + str(match_index))
        # see if we have a quorum
        count = 1
        new_idx = commit_index
        #print('match_index: ' + str(match_index) + ', leader commit_index: ' + str(commit_index))
        #print('next_index: ' + str(next_index))
        for id in replica_ids:
            if (match_index[id] > commit_index):
                count = count + 1
                if (new_idx == commit_index):
                    new_idx = new_idx + 1 # TODO find the minimum of what's greatr than us
        if count > (len(replica_ids) + 1) / 2: # TODO check term
            #print('quorum!!')
            # good
            while (commit_index < new_idx):
                entry = LOG[commit_index + 1]
                VALUES[entry['key']] = entry['value']
                commit_index = commit_index + 1
            #print('sending ok, KEY = ' + str(acked_entry['key']))
            res = {'src': my_id, 'dst': LOG[commit_index]['client'], 'leader': LEADER, 'type': 'ok', 'MID': LOG[commit_index]['MID']}

    if res:
        sock.send(json.dumps(res))

def msg_candidate(msg):
    global BUFFER, leader_seen, LEADER, STATE, FOLLOWER, TERM, VOTES, LEADER_STATE
    if msg['type'] in ['get', 'put']:
    # store the message until the election is over
        BUFFER.append(msg)
    elif msg['type'] == 'append_entries':
        #print(str(my_id) + ' candidate received heartbeat')
        leader_seen = time.time()
        LEADER = msg['src']
        STATE = FOLLOWER
        send_buffer()
        # TODO implement commit stage here if msg['key']
    elif msg['type'] == 'request_vote':
        if (TERM < msg['term']):
            leader_seen = time.time()
            TERM = msg['term']
            msg = {'src': my_id, 'dst': msg['src'], 'leader': 'FFFF', 'type': 'vote', 'term': TERM}
            VOTED_FOR = msg['src']
            STATE = FOLLOWER
            send_buffer()
            #print(str(my_id) + ' voting in term ' + str(TERM))
            sock.send(json.dumps(msg))
    elif msg['type'] == 'vote':
        if (TERM == msg['term']):
            leader_seen = time.time()
            VOTES = VOTES + 1
            if (VOTES > (len(replica_ids) + 1) / 2):
                #print(str(my_id) + ' is now leader')
                STATE = LEADER_STATE
                LEADER = my_id # declare victory
                initialize_indices() # configure leader indices
                send_buffer()
                VOTES = 0
     
def msg_follower(msg):
    global leader_seen, LEADER, TERM, BUFFER, VALUES, commit_index
    if msg['type'] in ['get', 'put']:
        msg = {'src': my_id, 'dst': msg['src'], 'leader': LEADER, 'type': 'redirect', 'MID': msg['MID']}
        if (LEADER == 'FFFF'):
            BUFFER.append(msg)
        else:
            sock.send(json.dumps(msg))
    elif msg['type'] == 'request_vote':
        if (TERM < msg['term']):
            leader_seen = time.time()
            TERM = msg['term']
            msg = {'src': my_id, 'dst': msg['src'], 'leader': 'FFFF', 'type': 'vote', 'term': TERM}
            #print(str(my_id) + ' voting in term ' + str(TERM))
            VOTED_FOR = msg['src']
            sock.send(json.dumps(msg))
    elif msg['type'] == 'append_entries':
        leader_seen = time.time()
        if msg['commit_index'] > commit_index:
            new_idx = min(msg['commit_index'], len(LOG) - 1)
            while (new_idx > commit_index):
                entry = LOG[commit_index + 1]
                VALUES[entry['key']] = entry['value']
                commit_index = commit_index + 1
        if (TERM < msg['term'] or (TERM == msg['term'] and LEADER != msg['leader'])):
            LEADER = msg['src']
            TERM = msg['term']
            send_buffer()
        if (msg['key']):
            #print('follower received ' + str(msg) + ', TERM = ' + str(TERM) + ' commit_index = ' + str(commit_index))
            last_entry = len(LOG) - 1
            # TODO what to do if follower commit index > leader commit index?
            if msg['term'] == TERM and msg['prevLogIndex'] == last_entry and msg['prevLogTerm'] == LOG[last_entry]['term']:
                # add to log, send an ACK to the leader
                entry = {'term': msg['term'], 'key': msg['key'], 'value': msg['value'], 'MID': msg['MID'], 'client': msg['src']}
                LOG.append(entry)
                #print('sending ACK, LOG is len ' + str(len(LOG)))
                ack = {'src': my_id, 'dst': msg['src'], 'leader': LEADER, 'type': 'ACK', 'success': True, 'term': TERM, 'commit_index': commit_index, 'received_index': len(LOG) - 1}
                #print('sending ACK: ' + str(ack))
                sock.send(json.dumps(ack))
                #print('sending ACK')
            elif msg['term'] == TERM and msg['prevLogIndex'] <= last_entry and msg['prevLogTerm'] != LOG[msg['prevLogIndex']]['term']:
                # actually delete stuff because we are ahead of the leader
                print('todo')
            elif msg['term'] == TERM and msg['prevLogIndex'] > last_entry:
                # tell them to slow down
                print('slow down')
                ack = {'src': my_id, 'dst': msg['src'], 'leader': LEADER, 'type': 'ACK', 'success': False, 'term': TERM, 'commit_index': commit_index, 'received_index': msg['prevLogIndex'] + 1}
                sock.send(json.dumps(ack))
            # TODO also see if entry conflicts with prevLogTerm > term

while True:
    ready = select.select([sock], [], [], 0.02)[0]

    if sock in ready:
        msg_raw = sock.recv(32768)

        if len(msg_raw) != 0:
            msg = json.loads(msg_raw)
            if (msg['dst'] == my_id):
                if STATE == LEADER_STATE:
                    msg_leader(msg)
                elif STATE == CANDIDATE:
                    msg_candidate(msg)
                else:
                    msg_follower(msg)

    clock = time.time()
    if STATE == LEADER_STATE and clock-last > .12:
        # Heartbeats
        for id in replica_ids:
            if next_index[id] == len(LOG):
                # send empty Heartbeat
                msg = {'src': my_id, 'dst': id, 'leader': LEADER, 'term': TERM, 'type': 'append_entries', 'commit_index': commit_index, 'prevLogIndex': (next_index[id] - 1), 'key': None, 'value': None}
                #print('leader ' + str(my_id) + ' sending heartbeat ')
            else:
                # send next next_index
                # TODO blerner would cry abstract this
                entry = LOG[next_index[id]]
                #print('entry is ' + str(entry) + ', LOG is ' + str(LOG))
                msg = {'src': my_id, 'dst': id, 'leader': LEADER, 'term': TERM, 'type': 'append_entries', 
'key': entry['key'], 'value': entry['value'], 'MID': entry['MID'], 'client': entry['client'], 'commit_index': commit_index, 'prevLogIndex': (next_index[id] - 1), 'prevLogTerm': LOG[next_index[id] - 1]['term']}
            sock.send(json.dumps(msg))

        last = clock

    elif (STATE != LEADER_STATE) and (clock-leader_seen > ELECTION_TIMEOUT):
        STATE = CANDIDATE
        TERM = TERM + 1
        VOTES = 1
        #print(str(my_id) + ' request_vote: clock = ' + str(clock) + ' diff = ' + str(clock-leader_seen))
        leader_seen = time.time()
        for id in replica_ids:
            msg = {'src': my_id, 'dst': id, 'leader': LEADER, 'type': 'request_vote', 'term': TERM}
            sock.send(json.dumps(msg))
